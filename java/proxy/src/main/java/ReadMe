Proxy Pattern:
--核心作用
 .通过代理，控制对象的访问
  可以详细控制访问某个(某类)对象的方法，在调用这个方法之前或之后做而外处理。即AOP的围观实现。
  将统一流程放到代理类中处理
 AOP：(Aspect Oriented Programming)面向切面编程
  
  代理模式：
   核心角色
  抽象角色：定义代理角色和具体角色的公共对外方法。
  具体角色：实现抽象角色，定义真是角色所要实现的业务逻辑，工代理角色调用。
        关注真正的业务逻辑
  代理角色：
    --实现抽象角色，是真是角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作
    --将统一的流程控制放到代理角色中处理。
    
 应用场景：
 安全代理：屏蔽对真实角色的直接访问
 远程代理：通过代理类处理远程方法调用
 延迟加载：   先加载轻量级的代理对象，真正需要再加载真实对象
  分类：
    --静态代理(静态定义代理类)
    --动态代理(动态生成代理类)
      .JDK自带的动态代理
      .java assist 字节码操作库实现
      .CGLIB
      .ASM(底层使用指令，可维护性较差)
   静态代理和动态代理：
   动态代理优点：  抽象角色中(接口)申明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，可以更加灵活和统一处理众多的方法。
   
  JDK自带的动态代理：
    java.lang.reflect.Proxy
    作用：动态生成代理类和对象
    java.lang.reflect.InvocationHandler(处理器接口)
    可以通过invoke方法实现对真实角色的代理访问
    每次通过Proxy生成代理类对象时都要指定对应的处理器对象。
    